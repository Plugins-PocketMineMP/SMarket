<?php

namespace solo\smarket;

use pocketmine\item\Item;
use solo\smarket\util\MarketException;
use solo\smarket\util\Util;

class MarketFactory{

	private $owner;

	private $defaultMarketList = [];

	private $marketList_Id_Market = [];
	private $marketList_Item_Id = [];

	public function __construct(SMarket $owner){
		$this->owner = $owner;

		$this->initialDefaultMarket();
		$this->load();
	}

	public function registerMarket(Item $item, $buyPrice = null, $sellPrice = null){
		$id = 1;
		while(isset($this->marketList_Id_Market[$id])){
			++$id;
		}
		$itemHash = Util::itemHash($item);
		if($buyPrice === null || $sellPrice === null){
			$defaultMarket = $this->defaultMarketList[$itemHash] ?? null;
			if($defaultMarket !== null){
				$buyPrice = $buyPrice ?? $defaultMarket->getBuyPrice();
				$sellPrice = $sellPrice ?? $defaultMarket->getSellPrice();
			}
		}
		$market = new Market($id, $item, $buyPrice ?? -1, $sellPrice ?? -1);
		$this->marketList_Id_Market[$market->getId()] = $market;
		$this->marketList_Item_Id[$itemHash] = $market->getId();
		return $market;
	}

	public function getMarket(int $id){
		return $this->marketList_Id_Market[$id] ?? null;
	}

	public function getMarketByItem(Item $item, bool $create = true){
		$hash = Util::itemHash($item);
		if(isset($this->marketList_Item_Id[$hash])){
			$id = $this->marketList_Item_Id[$hash];
			if(isset($this->marketList_Id_Market[$id])){
				return $this->marketList_Id_Market[$id];
			}
			unset($this->marketList_Item_Id[$hash]);
		}
		if($create){
			return $this->registerMarket($item);
		}
		return null;
	}

	/**
	 * @return Market[]
	 */
	public function getAllMarket(){
		return $this->marketList_Id_Market;
	}

	public function load(){
		$file = $this->owner->getDataFolder() . "registered_markets.json";
		if(file_exists($file)){
			foreach(Util::jsonDecode(file_get_contents($file)) as $data){
				try{
					$market = Market::jsonDeserialize($data);

					$this->marketList_Id_Market[$market->getId()] = $market;
					$this->marketList_Item_Id[Util::itemHash($market->getItem())] = $market->getId();
				}catch(MarketException $e){
					$this->owner->getServer()->getLogger()->critical("[SMarket] " . $e->getMessage());
					continue;
				}
			}
		}
	}

	public function save(){
		$serialized = [];
		foreach($this->marketList_Id_Market as $market){
			$serialized[$market->getId()] = $market->jsonSerialize();
		}
		file_put_contents($this->owner->getDataFolder() . "registered_markets.json", json_encode($serialized));
	}

	private function initialDefaultMarket(){
		foreach([
			// Item price get from http://towncraft.us/towncraft-minecraft-item-pricelist/
			//
			// ItemName => [Buy, Sell]
			"1" => [2, 0.5],
			"2" => [2, 0.5],
			"3" => [1, 0.25],
			"4" => [1, 0.25],

			"5" => [2, 0.5],
			"5:1" => [2, 0.5],
			"5:2" => [2, 0.5],
			"5:3" => [2, 0.5],
			"5:4" => [2, 0.5],
			"5:5" => [2, 0.5],
			"6" => [1, 0.25],
			"6:1" => [1, 0.25],
			"6:2" => [1, 0.25],
			"6:3" => [1, 0.25],
			"6:4" => [1, 0.25],
			"6:5" => [1, 0.25],

			"12" => [1, 0.25],
			"13" => [1, 0.25],
			"14" => [1000, 250],
			"15" => [300, 75],
			"16" => [140, 35],
			"17" => [8, 2],
			"17:1" => [8, 2],
			"17:2" => [8, 2],
			"17:3" => [8, 3],
			"18" => [0.4, 0.1],
			"18:1" => [0.4, 0.1],
			"18:2" => [0.4, 0.1],
			"18:3" => [0.4, 0.1],
			"19" => [100000, 25000], //Sponge
			"20" => [17, 4.25],
			"21" => [300, 75],
			"22" => [385.71, 96.43],
			"23" => [70, 17.5], // Dispenser
			"24" => [4, 1],
			"24:1" => [4, 1],
			"24:2" => [4, 1],
			"25" => [46, 11.5],

			"27" => [905.17, 226.29],
			"28" => [275.67, 68.92],
			"29" => [314, 78.5],
			"30" => [100, 25],
			"31" => [4, 1],
			"31:1" => [4, 1],
			"31:2" => [4, 1],
			"32" => [4, 1],
			"33" => [310, 77.5],
			"35" => [40, 10],
			"35:1" => [49, 12.25],
			"35:2" => [56.38, 14.10],
			"35:3" => [62.76, 15.69],
			"35:4" => [48, 12],
			"35:5" => [59.33, 14.83],
			"35:6" => [46.33, 11.58],
			"35:7" => [51.33, 12.83],
			"35:8" => [48.44, 12.11],
			"35:9" => [79.43, 19.86],
			"35:10" => [66.43, 16.61],
			"35:11" => [82.86, 20.71],
			"35:12" => [44, 11],
			"35:13" => [76, 19],
			"35:14" => [50, 12],
			"35:15" => [60, 15],

			"37" => [16, 4],
			"38" => [20, 5],
			"38:1" => [20, 5],
			"38:2" => [20, 5],
			"38:3" => [20, 5],
			"38:4" => [20, 5],
			"38:5" => [20, 5],
			"38:6" => [20, 5],
			"38:7" => [20, 5],
			"38:8" => [20, 5],
			"39" => [16, 4],
			"40" => [20, 5],
			"41" => [8100, 2025],
			"42" => [2430, 607.5],

			"44" => [1, 0.25],
			"44:1" => [2, 0.5],
			"44:2" => [1, 0.25],
			"44:3" => [0.5, 0.13],
			"44:4" => [52, 13],
			"44:5" => [1, 0.25],
			"44:6" => [32.8, 8.2],
			"44:7" => [140, 35],
			"45" => [104, 26],
			//"46" => [104, 26], // TNT
			"47" => [240, 60],
			"48" => [4, 1],
			"49" => [200, 50],
			"50" => [4.25, 1.06],
			"51" => [10000, 2500], // Fire

			"53" => [3, 0.75],
			"54" => [16, 4],

			"56" => [2400, 600],
			"57" => [16200, 4050],
			"58" => [8, 2],

			"61" => [8, 2],
			"65" => [2.33, 0.58],
			"66" => [101.31, 25.33],
			"67" => [1.5, 0.38],

			"69" => [2, 0.5],
			"70" => [4, 1],

			"72" => [4, 1],
			"73" => [200, 50],
			"74" => [200, 50],

			"76" => [31, 7.75],
			"77" => [2, 0.5],

			"79" => [20, 5],
			"80" => [0.8, 0.2],
			"81" => [20, 5],
			"82" => [40, 10],

			"84" => [1816, 454],
			"85" => [3, 0.75],
			"85:1" => [3, 0.75],
			"85:2" => [3, 0.75],
			"85:3" => [3, 0.75],
			"85:4" => [3, 0.75],
			"85:5" => [3, 0.75],
			"86" => [16, 4],
			"87" => [0.4, 0.1],
			"88" => [10, 2.5],
			"89" => [8, 2],

			"91" => [20.25, 5.06],

			"96" => [6, 1.5],

			"98" => [2, 0.5],

			"101" => [101.25, 25.31],
			"102" => [6.38, 1.59],
			"103" => [36, 9],

			"106" => [4, 1],
			"107" => [8, 2],
			"108" => [156, 39],
			"109" => [3, 0.75],
			"110" => [40, 10],
			"111" => [40, 10],
			"112" => [65.6, 16.4],
			"113" => [65.6, 16.4],
			"114" => [98.4, 24.6],
			//"115" => [16, 4],
			"116" => [4476, 1119],

			"121" => [4, 1],
			"122" => [4000000, 1000000],
			"123" => [128, 32],

			"128" => [6, 1.5],
			"129" => [1800, 450],
			"130" => [1750, 437.5],
			"131" => [136.5, 34.13],

			"133" => [12150, 3037],
			"134" => [3, 0.75],
			"135" => [3, 0.75],
			"136" => [3, 0.75],

			"138" => [105685, 26421],
			"139" => [1, 0.25],
			"139:1" => [4, 1],

			"143" => [2, 0.5],
			"144" => [20000, 5000],
			"144:1" => [30000, 7500],
			"144:2" => [20000, 5000],
			"144:3" => [20000, 5000],
			"144:4" => [20000, 5000],
			"145" => [8370, 2092],
			"146" => [152, 38.13],
			"147" => [1800, 450],
			"148" => [540, 135],

			"151" => [264, 66],
			"152" => [270, 67.5],
			"153" => [140, 35],
			"154" => [1366, 341.5],
			"155" => [280, 70],

			"156" => [420, 105],

			"256" => [272, 68],
			"257" => [812, 203],
			"258" => [812, 203],
			"259" => [274, 68.5],
			"260" => [40, 10],
			"261" => [33, 8.25],
			"262" => [6.25, 1.56],
			"263" => [16, 4],
			"263:1" => [16, 4],
			"264" => [1800, 450],
			"265" => [270, 67.5],
			"266" => [900, 225],
			"267" => [541, 135.25],
			"268" => [5, 1.25],
			"269" => [4, 1],
			"270" => [8, 2],
			"271" => [8, 2],

			"276" => [3601, 900.25],
			"277" => [1802, 450.50],
			"278" => [5402, 1350.5],
			"279" => [5402, 1350.5],
			"280" => [1, 0.25],
			"281" => [1.5, 0.38],
			"282" => [37.5, 9.38],
			"283" => [1801, 450.25],
			"284" => [902, 225.5],
			"285" => [2702, 675.5],
			"286" => [2702, 675.5],
			"287" => [10, 2.5],
			"288" => [20, 5],
			"289" => [20, 5],
			"290" => [6, 1.5],
			"291" => [6, 1.5],
			"292" => [542, 135],
			"293" => [3602, 900.5],
			"294" => [1802, 450.5],
			"295" => [1, 0.25],
			"296" => [9, 2.25],
			"297" => [27, 6.75],
			"298" => [200, 50],
			"299" => [320, 80],
			"300" => [280, 70],
			"301" => [160, 40],
			"302" => [10000, 2500],
			"303" => [16000, 4000],
			"304" => [14000, 3500],
			"305" => [8000, 2000],
			"306" => [1350, 337.5],
			"307" => [2160, 540],
			"308" => [1890, 472.5],
			"309" => [1080, 270],
			"310" => [9000, 2250],
			"311" => [14400, 3600],
			"312" => [12600, 3150],
			"313" => [7200, 1800],
			"314" => [4500, 1125],
			"315" => [7200, 1800],
			"316" => [6300, 1575],
			"317" => [3600, 900],
			"318" => [4, 1],
			"319" => [20, 5],
			"320" => [36, 9],
			"321" => [48, 12],
			"322" => [840, 210],
			"322:1" => [64840, 16210],
			"323" => [4.33, 1.08],
			"324" => [12, 3],
			"325" => [810, 202.5],
			"326" => [910, 227.5],

			"328" => [1350, 337.5],
			"329" => [500, 125],
			"330" => [1620, 405],
			"331" => [30, 7.5],
			"332" => [0.2, 0.05],
			"333" => [10, 2.5],
			"334" => [40, 10],
			"335" => [910, 227.5],
			"336" => [26, 6.5],
			"337" => [10, 2.5],
			"338" => [12, 3],
			"339" => [12, 3],
			"340" => [76, 19],
			"341" => [4, 1],
			"342" => [1366, 341.5],
			"343" => [1358, 339.5],
			"344" => [10, 2.5],
			"345" => [1110, 277.5],
			"346" => [23, 5.75],
			"347" => [3630, 907.5],
			"348" => [2, 0.5],
			"349" => [60, 15],
			"350" => [76, 19],
			"351" => [20, 5],
			"351:1" => [10, 2.5],
			"351:2" => [36, 9],
			"351:3" => [4, 1],
			"351:4" => [42.86, 10.71],
			"351:5" => [26.43, 6.61],
			"351:6" => [39.42, 9.86],
			"351:7" => [8.44, 2.11],
			"351:8" => [11.33, 2.83],
			"351:9" => [6.33, 1.58],
			"351:10" => [19.33, 4.83],
			"351:11" => [8, 2],
			"351:12" => [22.76, 5.69],
			"351:13" => [16.38, 4.1],
			"351:14" => [9, 2.25],
			"351:15" => [2.67, 0.67],
			"352" => [8, 2],
			"353" => [12, 3],
			"354" => [61, 15.25],
			"355" => [126, 31.5],
			"356" => [98, 24],
			"357" => [2.75, 0.69],
			"358" => [1206, 301.5],
			"359" => [540, 135],
			"360" => [4, 1],
			"361" => [4, 1],
			"362" => [4, 1],
			"363" => [20, 5],
			"364" => [36, 9],
			"365" => [12, 3],
			"366" => [32, 8],
			"367" => [0.4, 0.1],
			"368" => [100, 25],
			"369" => [100, 25],
			"370" => [200, 50],
			"371" => [100, 25],
			"372" => [16, 4],
			"373" => [21, 5.25],
			"373:16" => [37, 9.25],
			"373:32" => [23, 5.75],
			"373:64" => [33, 8.25],
			"373:8193" => [237, 59.25],
			"373:8194" => [49, 12.25],
			"373:8195" => [91, 22.75],
			"373:8196" => [49, 12.25],
			"373:8197" => [141, 35.25],
			"373:8198" => [847, 211.75],
			"373:8200" => [77, 19.25],
			"373:8201" => [87, 21.75],
			"373:8202" => [89, 22.25],
			"373:8204" => [181, 45.25],
			"373:8206" => [887, 221.75],
			"373:8225" => [239, 59.75],
			"373:8226" => [51, 12.75],
			"373:8228" => [51, 12.75],
			"373:8229" => [143, 35.75],
			"373:8233" => [89, 22.25],
			"373:8236" => [183, 45.75],
			"373:8257" => [267, 66.75],
			"373:8258" => [79, 19.75],
			"373:8259" => [121, 30.25],
			"373:8260" => [79, 19.75],
			"373:8262" => [877, 219.25],
			"373:8264" => [107, 26.75],
			"373:8266" => [119, 29.75],
			"373:8270" => [917, 229.25],
			"373:8289" => [2000, 500],
			"373:8292" => [2000, 500],
			"373:8297" => [2000, 500],
			"373:16385" => [257, 64.25],
			"373:16386" => [69, 17.25],
			"373:16387" => [111, 27.75],
			"373:16388" => [69, 17.25],
			"373:16389" => [161, 40.25],
			"373:16390" => [897, 224.25],
			"373:16392" => [97, 24.25],
			"373:16393" => [137, 34.25],
			"373:16394" => [109, 27.25],
			"373:16396" => [201, 50.25],
			"373:16398" => [907, 226.75],
			"373:16417" => [259, 64.75],
			"373:16418" => [71, 17.75],
			"373:16420" => [71, 17.75],
			"373:16421" => [163, 40.75],
			"373:16425" => [109, 27.75],
			"373:16428" => [203, 50.75],
			"373:16449" => [287, 71.75],
			"373:16450" => [99, 24.75],
			"373:16451" => [141, 35.25],
			"373:16452" => [99, 24.75],
			"373:16454" => [897, 224.25],
			"373:16456" => [127, 31.75],
			"373:16457" => [137, 34.25],
			"373:16458" => [139, 34.75],
			"373:16462" => [937, 234.25],
			"373:16481" => [2020, 505],
			"373:16482" => [2020, 505],
			"373:16484" => [2020, 505],
			"373:16489" => [2020, 505],
			"374" => [17, 4.25],
			"375" => [12, 3],
			"376" => [40, 10],
			"377" => [50, 12.5],
			"378" => [54, 13.5],
			"379" => [103, 25.75],
			"380" => [1890, 472.5],
			"381" => [150, 37.5],
			"382" => [104, 26],

			"385" => [28.67, 7.17],
			"386" => [116, 29],

			"388" => [1350, 337],
			"389" => [48, 12],
			"390" => [78, 19.5],
			"391" => [10, 2.5],
			"392" => [10, 2.5],
			"393" => [26, 6.5],

			"395" => [1206, 301.5],
			"396" => [810, 202.5],
			"397" => [10000, 2500],
			"397:1" => [30000, 7500],
			"397:2" => [10000, 2500],
			"397:3" => [10000, 2500],
			"397:4" => [10000, 2500],
			"398" => [11, 2.75],
			"399" => [105000, 26250],
			"400" => [38, 9.5],

			"404" => [169, 42.25],
			"405" => [16.4, 4.1],
			"406" => [70, 17.5]

		] as $item => $prices){
			$itemInstance = Util::parseItem($item);
			if($itemInstance === null){
				continue;
			}

			$market = new Market(0, $itemInstance, $prices[0], $prices[1]);
			$this->defaultMarketList[Util::itemHash($itemInstance)] = $market;
		}
	}
}
